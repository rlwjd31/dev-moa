import { nanoid } from 'nanoid';
import { useState } from 'react';

import { useDispatch, useSelector } from 'react-redux';
import Swal from 'sweetalert2';
import { useNavigate } from 'react-router-dom';
import StarRating from '../components/StarRating';
import ProfileLine from '../components/UI/ProfileLine';
import Tag from '../components/UI/Tag';
import Input from '../components/UI/Input';
import { addDevelopmentPostAction } from '../store/allDevelopmentSlice';
import LoadingPage from './LoadingPage';

// form Í¥ÄÎ†® ÎùºÏù¥Î∏åÎü¨Î¶¨ -> react hook ÎòêÎäî Îã§Î•∏ ÎùºÏù¥Î∏åÎü¨Î¶¨
// render tree
// usestate Í∞í Ïú†ÏßÄÎêòÎäî Í≤É?
function NewPost() {
  const dispatch = useDispatch();
  const navigator = useNavigate();
  const {
    user: userInfo,
    allDevelopments: { status: isAddingDevelopment },
  } = useSelector(state => state);
  const [newPostInfo, setNewPostInfo] = useState({
    title: '',
    content: '',
    tags: { arr: [], value: '' },
    sorta: '',
    star: 0,
    starAvg: 0,
    // TODO: userId mapping ÌïÑÏöî!!
    sourceMedia: 'velog', // ÏûÑÏùò
    thumbnailImage: '', // ÏûÑÏùò
    sourceURL: '', // ÏûÑÏùò
    createdAt: '',
    modifiedAt: '',
    // ! Error log: ÏïÑÎûòÏôÄ Í∞ôÏù¥ state tookitÏóê ÏûàÎäî Í≤ÉÏóê Ï¥àÍ∏∞Í∞íÏúºÎ°ú ÏÑ§Ï†ïÌïòÎ©¥ Îπà Í∞íÏù¥ Îì§Ïñ¥Ïò§ÎäîÎç∞
    // ! Ïù¥Îäî ÏΩîÎìúÏùò ÏàúÏÑúÏôÄ Í∞ôÏù¥ ÏàúÏ∞®Ï†ÅÏúºÎ°ú stateÎ•º Í∞ÄÏ†∏Ïò§ÏßÄ ÏïäÎäî Í≤É Í∞ôÎã§.
    author: '',
    recommends: 0,
  });

  const onStarClickHandler = starValue =>
    setNewPostInfo(prev => ({ ...prev, star: starValue, starAvg: starValue }));
  const onSortaClickHandler = newSortaValue => {
    let tmpSortaValue = '';

    if (newSortaValue === 'Í∏Ä') {
      tmpSortaValue = 'text';
    } else if (newSortaValue === 'ÏòÅÏÉÅ') {
      tmpSortaValue = 'video';
    } else if (newSortaValue === 'Ìä∏Î†åÎìú') {
      tmpSortaValue = 'trend';
    }
    setNewPostInfo(prev => ({ ...prev, sorta: tmpSortaValue }));
  };

  const onTagsInputKeyDownHandler = e => {
    if (e.key === 'Enter') {
      setNewPostInfo(prev => ({
        ...prev,
        tags: {
          arr: [...prev.tags.arr, e.target.value],
          value: '', // tagÏûÖÎ†•(Enter Ïãú) Îπà Í∞íÏúºÎ°ú Ï¥àÍ∏∞Ìôî
        },
      }));
    }

    return null;
  };

  const onTagsInputChangeHandler = e =>
    setNewPostInfo(prev => ({
      ...prev,
      tags: {
        ...prev.tags,
        value: e.target.value,
      },
    }));

  const onTitleChangeHandler = e =>
    setNewPostInfo(prev => ({ ...prev, title: e.target.value }));
  const onContentChangeHandler = e =>
    setNewPostInfo(prev => ({ ...prev, content: e.target.value }));
  const onSourceURLChangeHandler = e =>
    setNewPostInfo(prev => ({ ...prev, sourceURL: e.target.value }));
  const onSourceMediaChangeHandler = e =>
    setNewPostInfo(prev => ({ ...prev, sourceMedia: e.target.value }));

  const onThumbnailChangeHandler = e =>
    setNewPostInfo(prev => ({ ...prev, thumbnailImage: e.target.value }));

  const onAddNewPostClickHandler = async () => {
    const copyNewPostInfo = {
      ...newPostInfo,
      createdAt: new Date().toString(),
      modifiedAt: new Date().toString(),
      author: {
        id: userInfo.id,
        name: userInfo.name,
        profileImage: userInfo.profileImage,
      },
      tags: newPostInfo.tags.arr,
      id: nanoid(),
    };
    dispatch(addDevelopmentPostAction(copyNewPostInfo));
    await Swal.fire({
      position: 'center',
      icon: 'success',
      title: 'Í∞úÎ∞ú Í≤åÏãúÍ∏ÄÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!!üòç‚úÖ',
      showConfirmButton: false,
      timer: 2000,
    });
    navigator('/developments');
  };

  return (
    <div className="w-full mt-main-top flex flex-col">
      {isAddingDevelopment === 'loading' && <LoadingPage />}
      {isAddingDevelopment !== 'loading' && (
        <>
          <h2>
            <span className="border-b-[3px] border-solid pb-3 border-black3 font-bold text-xl">
              Í∏Ä Ïì∞Í∏∞
            </span>
          </h2>
          <div className="py-12">
            <ProfileLine
              title="Ï†úÎ™©"
              content="Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              className="px-7 py-7 border-b-[1px] border-solid border-gray13"
            >
              <Input
                placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                className="w-full text-gray13 bg-gray1 outline-none"
                value={newPostInfo.title}
                onChangeHandler={onTitleChangeHandler}
              />
            </ProfileLine>
            <ProfileLine
              title="ÎÇ¥Ïö©"
              content="Ï∂îÏ≤úÌïòÍ≤å Îêú Ïù¥Ïú†Î•º ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî"
              className="items-start px-7 py-7 border-b-[1px] border-solid border-gray13"
            >
              <textarea
                className="flex items-center w-full text-gray13 bg-gray1 outline-none h-[14rem]"
                placeholder="Ï∂îÏ≤úÌïòÍ≤å Îêú Ïù¥Ïú†Î•º ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî"
                value={newPostInfo.content}
                onChange={onContentChangeHandler}
              />
            </ProfileLine>
            <ProfileLine title="Ïç∏ÎÑ§Ïùº" content="ÎßÅÌÅ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" className="px-7 py-7">
              <div className="flex flex-col items-center">
                <Input
                  placeholder="Ïç∏ÎÑ§ÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  className="w-full text-gray13 bg-gray1 outline-none"
                  value={newPostInfo.thumbnailImage}
                  onChangeHandler={onThumbnailChangeHandler}
                />
                {newPostInfo.thumbnailImage && (
                  <img
                    className="mt-4"
                    src={`${newPostInfo.thumbnailImage}`}
                    alt="uploaded thumbnail"
                  />
                )}
              </div>
            </ProfileLine>
            <ProfileLine title="Îß§Ï≤¥" content="Îß§Ï≤¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" className="px-7 py-7">
              <Input
                placeholder="ÎßÅÌÅ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                className="w-full text-gray13 bg-gray1 outline-none"
                value={newPostInfo.sourceMedia}
                onChangeHandler={onSourceMediaChangeHandler}
              />
            </ProfileLine>
            <ProfileLine title="ÎßÅÌÅ¨" content="ÎßÅÌÅ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" className="px-7 py-7">
              <Input
                placeholder="ÎßÅÌÅ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                className="w-full text-gray13 bg-gray1 outline-none"
                value={newPostInfo.sourceURL}
                onChangeHandler={onSourceURLChangeHandler}
              />
            </ProfileLine>
            <ProfileLine title="ÌÉúÍ∑∏" content="ÌÉúÍ∑∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" className="px-7 py-7">
              {newPostInfo.tags.arr.map((tagName, index) => (
                <Tag
                  // eslint-disable-next-line react/no-array-index-key
                  key={index}
                  onClick={() => {}}
                  tagName={tagName}
                  className="text-black3 bg-white"
                />
              ))}
              <Input
                placeholder="ÌÉúÍ∑∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                className="w-full text-gray13 bg-gray1 outline-none"
                onChangeHandler={onTagsInputChangeHandler}
                onKeyDownHandler={onTagsInputKeyDownHandler}
                value={newPostInfo.tags.value}
              />
            </ProfileLine>
            <ProfileLine title="Ï¢ÖÎ•ò" content="" className="px-7 py-7">
              {['Í∏Ä', 'ÏòÅÏÉÅ', 'Ìä∏Î†åÎìú'].map(sorta => (
                <Tag
                  onClick={onSortaClickHandler}
                  key={sorta}
                  tagName={sorta}
                  className={
                    { Í∏Ä: 'text', ÏòÅÏÉÅ: 'video', Ìä∏Î†åÎìú: 'trend' }[sorta].toString() ===
                    newPostInfo.sorta.toString()
                      ? 'bg-black3 text-white'
                      : 'bg-white text-black3'
                  }
                />
              ))}
            </ProfileLine>
            <ProfileLine
              title="Î≥ÑÏ†ê"
              content="Î≥ÑÏ†ê"
              className="px-7 py-7 border-b-[1px] border-solid border-gray13"
            >
              <StarRating rating={newPostInfo.star} onStarClick={onStarClickHandler} />
            </ProfileLine>
          </div>
          <div className="w-full flex justify-center items-center mb-7">
            <button
              type="button"
              className="border border-gray8 w-[4.75rem] h-[3rem] text-sm mr-[1.375rem]"
            >
              Ï∑®ÏÜå
            </button>
            <button
              type="button"
              className="border border-gray8 w-[4.75rem] h-[3rem] text-sm"
              onClick={onAddNewPostClickHandler}
            >
              Îì±Î°ù
            </button>
          </div>
        </>
      )}
    </div>
  );
}

export default NewPost;
